!function(g){function I(A){if(C[A])return C[A].exports;var e=C[A]={i:A,l:!1,exports:{}};return g[A].call(e.exports,e,e.exports,I),e.l=!0,e.exports}var C={};I.m=g,I.c=C,I.d=function(g,C,A){I.o(g,C)||Object.defineProperty(g,C,{configurable:!1,enumerable:!0,get:A})},I.n=function(g){var C=g&&g.__esModule?function(){return g.default}:function(){return g};return I.d(C,"a",C),C},I.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},I.p="",I(I.s=0)}([function(g,I,C){C(1),g.exports=C(3)},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _RuleStyleSheet = _interopRequireDefault(__webpack_require__(2));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * View model for OctoPrint-Themeify\n *\n * Author: Birk Johansson\n * License: MIT\n */\n$(function () {\n  function ThemeifyViewModel(parameters) {\n    var self = this;\n    self.classId = 'themeify';\n    self.settings = parameters[0];\n    self.ownSettings = {};\n    self.customRules = [];\n    self._ownSettingsPrev = {}; //holds subscriptions, so that they can be removed later\n\n    self.configSubscriptions = {\n      enabled: '',\n      theme: ''\n    };\n    self.tabIcons = {};\n    self.oldTabContent = {};\n\n    self.init = function () {\n      self.customRuleStyleSheet = _RuleStyleSheet.default.createStyleSheet('themeify-customStyleSheet', self.customRules);\n      self.builtInStyles = _RuleStyleSheet.default.createStyleSheet('themeify-builtInStyleSheet', self.ownSettings.color); //optimize \"flicker\" before theme is loaded\n\n      self.enableBeforeLoaded();\n    };\n\n    self.onStartupComplete = function () {\n      var htmlId = $('html').attr('id'); //Remove styling if touch is enabled\n\n      if (htmlId && htmlId == 'touch') {\n        $('html').removeClass(self.classId);\n      }\n\n      console.log(self);\n      self.updateColors();\n\n      self._updateCustomRules();\n    };\n\n    self.setupIcons = function () {\n      self.tabIcons.tabs().filter(function (tab) {\n        return tab.domId() && tab.enabled();\n      }).map(function (tab, i) {\n        var domId = tab.domId,\n            enabled = tab.enabled,\n            faIcon = tab.faIcon;\n        var icon = $(\"<i>\", {\n          class: faIcon()\n        });\n        var elem$ = $(\"\".concat(domId(), \" a\"));\n\n        if (elem$ && elem$.closest('ul').attr('id') === 'tabs') {\n          self.oldTabContent[domId()] = $(\"\".concat(domId(), \" a\")).html();\n          elem$.html(icon);\n        } else {\n          console.warn(\"Themeify: Failed to add icon! \".concat(domId(), \" is not a child of the tab-list!\"));\n        }\n      });\n    };\n\n    self.restoreTabs = function () {\n      self.tabIcons.tabs().filter(function (tab) {\n        return tab.domId();\n      }).map(function (tab, i) {\n        var domId = tab.domId,\n            enabled = tab.enabled,\n            faIcon = tab.faIcon;\n        var oldContent = self.oldTabContent[domId()];\n\n        if (oldContent) {\n          $(\"\".concat(domId(), \" a\")).html(oldContent);\n        }\n      });\n    };\n    /**\n     * This is called before we have data, used to reduce \n     * initializing time before theme is applied\n     */\n\n\n    self.enableBeforeLoaded = function () {\n      var localTheme = localStorage.getItem('theme');\n\n      if (localTheme) {\n        $('html').addClass(self.classId).addClass(localTheme);\n      }\n    };\n\n    self.enableTheming = function () {\n      if (self.ownSettings.enabled() && $('html').attr('id') !== 'touch') {\n        var theme = self.ownSettings.theme();\n        localStorage.setItem('theme', theme);\n        $('html').addClass(self.classId).addClass(self.ownSettings.theme());\n      }\n    };\n\n    self.addNewCustomRule = function () {\n      var ruleObj = {\n        selector: ko.observable('div'),\n        rule: ko.observable('color'),\n        value: ko.observable(''),\n        enabled: ko.observable(true)\n      };\n\n      self._subscribeToDictValues(ruleObj, 'customRules', self.customRules().length);\n\n      self.ownSettings.customRules.push(ruleObj);\n      self.customRuleStyleSheet.addRule(ruleObj);\n    };\n\n    self.addNewIcon = function () {\n      var icon = {\n        domId: ko.observable(''),\n        enabled: ko.observable(true),\n        faIcon: ko.observable('')\n      };\n\n      self._subscribeToDictValues(icon, 'tabs');\n\n      self.tabIcons.tabs.push(icon);\n    };\n\n    self.onBeforeBinding = function () {\n      self.settings = self.settings.settings;\n      self.ownSettings = self.settings.plugins.themeify;\n      self.customRules = self.ownSettings.customRules.extend({\n        rateLimit: 50\n      });\n      self.onRuleToggle = self.onRuleToggle;\n      self.tabIcons = {\n        enabled: self.ownSettings.tabs.enableIcons,\n        tabs: self.ownSettings.tabs.icons\n      };\n\n      if (self.tabIcons.enabled()) {\n        self.setupIcons();\n      }\n\n      self.enableTheming();\n      self.customRuleStyleSheet.initWithRules(self.customRules);\n      self.builtInStyles.initWithRules(self.ownSettings.color);\n    };\n\n    self.updateColors = function () {\n      //   self._removeBuiltInStyles();\n      if (self.ownSettings.enableCustomization()) {\n        self.ownSettings.color().filter(function (rule) {\n          return !!rule.enabled();\n        }).map(function (rule, i) {\n          self._applyRule(rule, true);\n        });\n      }\n    };\n\n    self._updateCustomRules = function () {\n      //   self._removeCustomStyles();\n      self.updateColors();\n\n      if (self.ownSettings.enableCustomization()) {\n        self.ownSettings.customRules().filter(function (rule) {\n          return !!rule.enabled();\n        }).map(function (rule) {\n          self._applyRule(rule);\n        });\n      }\n    };\n\n    self._applyRule = function (rule) {\n      var builtIn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      //   const cssText = ruleObjectToCSSText(rule);\n      if (!rule.selector() || !rule.rule()) {\n        return;\n      } //self.customStyleSheet.insertRule(cssText);\n      //    console.log(self.)\n      // $(rule.selector()).css(rule.rule(), rule.value());\n\n    };\n\n    self.clone = function (obj) {\n      //get observable value\n      if (typeof obj == 'function') {\n        return obj();\n      }\n\n      if (obj === null || _typeof(obj) !== 'object' || 'isActiveClone' in obj) return obj;\n      if (obj instanceof Date) var temp = new obj.constructor();else var temp = obj.constructor();\n\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          obj['isActiveClone'] = null;\n          temp[key] = self.clone(obj[key]);\n          delete obj['isActiveClone'];\n        }\n      }\n\n      return temp;\n    };\n\n    self._copyOwnSettings = function () {\n      Object.keys(self.ownSettings).forEach(function (key, i) {\n        self._ownSettingsPrev[key] = self.clone(self.ownSettings[key]);\n      });\n    };\n\n    self.onColorChange = function (rule, valueChanged, index) {\n      console.log('color change', rule, index);\n      self.builtInStyles.updateRule(rule, index);\n    };\n\n    self.onCustomRuleChange = function (rule, valueChanged, index) {\n      //self.updateColors();\n      console.log('rule change', rule, index);\n\n      if (rule.rule() && rule.selector() && rule.value()) {\n        // self._updateCustomRules();\n        self.customRuleStyleSheet.updateRule(rule, index); //self.updateRuleStyleSheet(rule, index)\n      } // console.log()\n\n    };\n\n    self.onThemeChange = function (newVal) {\n      var previousTheme = localStorage.getItem('theme');\n\n      var hasClass = function hasClass(clazz) {\n        return $('html').hasClass(clazz);\n      };\n\n      if (!hasClass(newVal)) {\n        localStorage.setItem('theme', newVal);\n        $('html').addClass(newVal).removeClass(previousTheme);\n      }\n    };\n\n    self.onEnabledChange = function (newVal) {\n      if (newVal && $('html').attr('id') !== 'touch') {\n        self.enableTheming();\n      } else {\n        $('html').removeClass(self.classId);\n        localStorage.setItem('theme', false);\n        self.customRuleStyleSheet.disable();\n      }\n    };\n\n    self.onEnableCustomizationChange = function (newVal) {\n      if (newVal) {\n        self.customRuleStyleSheet.enable();\n      } else {\n        self.customRuleStyleSheet.disable();\n      }\n    };\n\n    self.onIconsEnableChange = function (newVal) {\n      if (newVal) {\n        self.setupIcons();\n      } else {\n        self.restoreTabs();\n      }\n    };\n\n    self.onIconChange = function (icon, value, i, propKey) {\n      if (!self.tabIcons.enabled()) return;\n\n      if (propKey === 'enabled' && !value) {\n        self.restoreTabs();\n      }\n\n      self.setupIcons();\n    };\n\n    self.onRuleToggle = function (rule) {\n      rule.enabled(!rule.enabled()); //onCustomColorChange will pickup this change and update accordingly\n    };\n\n    self.ruleIsDeleteable = function (rule) {\n      //deleteable if not exists\n      if (!rule.deletable || typeof rule.deletable !== 'function') {\n        return true;\n      }\n\n      return rule.deletable();\n    };\n\n    self.onCustomRuleDelete = function (rule, index) {\n      if (self.ruleIsDeleteable(rule)) {\n        self.customRuleStyleSheet.deleteRule(index());\n        self.customRules.remove(rule); //self._updateCustomRules();\n      }\n    };\n\n    self.onIconDelete = function (icon) {\n      self.restoreTabs();\n      self.tabIcons.tabs.remove(icon);\n      self.setupIcons();\n    };\n\n    self._subscribeToDictValues = function (dict, key, i, subscribeFunc) {\n      var subFunc = subscribeFunc ? subscribeFunc.bind(this, dict) : self.onCustomRuleChange.bind(this, dict);\n      Object.keys(dict).map(function (dictAttr) {\n        self.configSubscriptions[key].push(dict[dictAttr].subscribe(function (val) {\n          return subFunc(val, i, dictAttr);\n        }));\n      });\n    };\n\n    self.onSettingsShown = function () {\n      //subscribe to changes\n      Object.keys(self.ownSettings).map(function (key) {\n        if (key == 'customRules') {\n          self.configSubscriptions[key] = [];\n          self.customRules().map(function (rule, i) {\n            console.log('sub', i); //subscribe to the attributes (selector, rule, value, enabled etc)\n\n            self._subscribeToDictValues(rule, key, i);\n          });\n        } else if (key == 'color') {\n          self.configSubscriptions[key] = [];\n          var subFunc = self.onColorChange; //Loop rules\n\n          self.ownSettings.color().map(function (rule, i) {\n            //subscribe to the attributes (selector, rule, value, enabled etc)\n            self._subscribeToDictValues(rule, key, i, subFunc);\n          });\n        } else if (key == 'tabs') {\n          var sub = self.configSubscriptions[key] = [];\n          var _self$tabIcons = self.tabIcons,\n              enabled = _self$tabIcons.enabled,\n              tabs = _self$tabIcons.tabs;\n          sub.push(enabled.subscribe(self.onIconsEnableChange));\n          tabs().map(function (tab, i) {\n            self._subscribeToDictValues(tab, key, self.onIconChange);\n          });\n        } else {\n          //Use the map for simple subscriptions\n          var onChangeFunc = self.configOnChangeMap[key];\n          self.configSubscriptions[key] = self.ownSettings[key].subscribe(onChangeFunc);\n        }\n      });\n    };\n\n    self.onSettingsHidden = function () {\n      //Cleanup subscriptions\n      Object.keys(self.configSubscriptions).map(function (key, i) {\n        if (Array.isArray(self.configSubscriptions[key])) {\n          self.configSubscriptions[key].forEach(function (elem) {\n            elem.dispose();\n          });\n        } else {\n          self.configSubscriptions[key].dispose();\n        }\n      });\n    };\n\n    self.configOnChangeMap = {\n      enabled: self.onEnabledChange,\n      theme: self.onThemeChange,\n      enableCustomization: self.onEnableCustomizationChange\n    };\n    self.init();\n  }\n\n  OCTOPRINT_VIEWMODELS.push({\n    construct: ThemeifyViewModel,\n    dependencies: ['settingsViewModel'],\n    elements: ['#settings_plugin_themeify']\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9vY3RvcHJpbnRfdGhlbWVpZnkvc3RhdGljL2pzL3RoZW1laWZ5LmpzP2E4NDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJ1bGVTdHlsZVNoZWV0IGZyb20gJy4vUnVsZVN0eWxlU2hlZXQnXG4vKlxuICogVmlldyBtb2RlbCBmb3IgT2N0b1ByaW50LVRoZW1laWZ5XG4gKlxuICogQXV0aG9yOiBCaXJrIEpvaGFuc3NvblxuICogTGljZW5zZTogTUlUXG4gKi9cbiQoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gVGhlbWVpZnlWaWV3TW9kZWwocGFyYW1ldGVycykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHNlbGYuY2xhc3NJZCA9ICd0aGVtZWlmeSc7XG4gICAgICAgIHNlbGYuc2V0dGluZ3MgPSBwYXJhbWV0ZXJzWzBdO1xuXG4gICAgICAgIHNlbGYub3duU2V0dGluZ3MgPSB7fTtcbiAgICAgICAgc2VsZi5jdXN0b21SdWxlcyA9IFtdO1xuXG4gICAgICAgIHNlbGYuX293blNldHRpbmdzUHJldiA9IHt9O1xuXG4gICAgICAgIC8vaG9sZHMgc3Vic2NyaXB0aW9ucywgc28gdGhhdCB0aGV5IGNhbiBiZSByZW1vdmVkIGxhdGVyXG4gICAgICAgIHNlbGYuY29uZmlnU3Vic2NyaXB0aW9ucyA9IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6ICcnLFxuICAgICAgICAgICAgdGhlbWU6ICcnLFxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYudGFiSWNvbnMgPSB7fTtcbiAgICAgICAgc2VsZi5vbGRUYWJDb250ZW50ID0ge307XG5cbiAgICAgICAgc2VsZi5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLmN1c3RvbVJ1bGVTdHlsZVNoZWV0ID0gUnVsZVN0eWxlU2hlZXQuY3JlYXRlU3R5bGVTaGVldCgndGhlbWVpZnktY3VzdG9tU3R5bGVTaGVldCcsIHNlbGYuY3VzdG9tUnVsZXMpXG4gICAgICAgICAgICBzZWxmLmJ1aWx0SW5TdHlsZXMgPSBSdWxlU3R5bGVTaGVldC5jcmVhdGVTdHlsZVNoZWV0KCd0aGVtZWlmeS1idWlsdEluU3R5bGVTaGVldCcsIHNlbGYub3duU2V0dGluZ3MuY29sb3IpXG4gICAgICAgICAgICAvL29wdGltaXplIFwiZmxpY2tlclwiIGJlZm9yZSB0aGVtZSBpcyBsb2FkZWRcbiAgICAgICAgICAgIHNlbGYuZW5hYmxlQmVmb3JlTG9hZGVkKCk7XG4gICAgICAgIH07XG5cblxuICAgICAgICBzZWxmLm9uU3RhcnR1cENvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaHRtbElkID0gJCgnaHRtbCcpLmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICAvL1JlbW92ZSBzdHlsaW5nIGlmIHRvdWNoIGlzIGVuYWJsZWRcbiAgICAgICAgICAgIGlmIChodG1sSWQgJiYgaHRtbElkID09ICd0b3VjaCcpIHtcbiAgICAgICAgICAgICAgICAkKCdodG1sJykucmVtb3ZlQ2xhc3Moc2VsZi5jbGFzc0lkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlbGYpXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUNvbG9ycygpO1xuICAgICAgICAgICAgc2VsZi5fdXBkYXRlQ3VzdG9tUnVsZXMoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLnNldHVwSWNvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYudGFiSWNvbnNcbiAgICAgICAgICAgICAgICAudGFicygpXG4gICAgICAgICAgICAgICAgLmZpbHRlcih0YWIgPT4gdGFiLmRvbUlkKCkgJiYgdGFiLmVuYWJsZWQoKSlcbiAgICAgICAgICAgICAgICAubWFwKCh0YWIsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkb21JZCwgZW5hYmxlZCwgZmFJY29uIH0gPSB0YWI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGljb24gPSAkKGA8aT5gLCB7IGNsYXNzOiBmYUljb24oKSB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbSQgPSAkKGAke2RvbUlkKCl9IGFgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0kICYmIGVsZW0kLmNsb3Nlc3QoJ3VsJykuYXR0cignaWQnKSA9PT0gJ3RhYnMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9sZFRhYkNvbnRlbnRbZG9tSWQoKV0gPSAkKGAke2RvbUlkKCl9IGFgKS5odG1sKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtJC5odG1sKGljb24pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBUaGVtZWlmeTogRmFpbGVkIHRvIGFkZCBpY29uISAke2RvbUlkKCl9IGlzIG5vdCBhIGNoaWxkIG9mIHRoZSB0YWItbGlzdCFgXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5yZXN0b3JlVGFicyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi50YWJJY29uc1xuICAgICAgICAgICAgICAgIC50YWJzKClcbiAgICAgICAgICAgICAgICAuZmlsdGVyKHRhYiA9PiB0YWIuZG9tSWQoKSlcbiAgICAgICAgICAgICAgICAubWFwKCh0YWIsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkb21JZCwgZW5hYmxlZCwgZmFJY29uIH0gPSB0YWI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZENvbnRlbnQgPSBzZWxmLm9sZFRhYkNvbnRlbnRbZG9tSWQoKV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGAke2RvbUlkKCl9IGFgKS5odG1sKG9sZENvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgaXMgY2FsbGVkIGJlZm9yZSB3ZSBoYXZlIGRhdGEsIHVzZWQgdG8gcmVkdWNlIFxuICAgICAgICAgKiBpbml0aWFsaXppbmcgdGltZSBiZWZvcmUgdGhlbWUgaXMgYXBwbGllZFxuICAgICAgICAgKi9cbiAgICAgICAgc2VsZi5lbmFibGVCZWZvcmVMb2FkZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVGhlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGhlbWUnKTtcbiAgICAgICAgICAgIGlmIChsb2NhbFRoZW1lKSB7XG4gICAgICAgICAgICAgICAgJCgnaHRtbCcpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhzZWxmLmNsYXNzSWQpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhsb2NhbFRoZW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLmVuYWJsZVRoZW1pbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBzZWxmLm93blNldHRpbmdzLmVuYWJsZWQoKSAmJlxuICAgICAgICAgICAgICAgICQoJ2h0bWwnKS5hdHRyKCdpZCcpICE9PSAndG91Y2gnXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aGVtZSA9IHNlbGYub3duU2V0dGluZ3MudGhlbWUoKTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGhlbWUnLCB0aGVtZSk7XG4gICAgICAgICAgICAgICAgJCgnaHRtbCcpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhzZWxmLmNsYXNzSWQpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhzZWxmLm93blNldHRpbmdzLnRoZW1lKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuYWRkTmV3Q3VzdG9tUnVsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHJ1bGVPYmogPSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6IGtvLm9ic2VydmFibGUoJ2RpdicpLFxuICAgICAgICAgICAgICAgIHJ1bGU6IGtvLm9ic2VydmFibGUoJ2NvbG9yJyksXG4gICAgICAgICAgICAgICAgdmFsdWU6IGtvLm9ic2VydmFibGUoJycpLFxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2VsZi5fc3Vic2NyaWJlVG9EaWN0VmFsdWVzKHJ1bGVPYmosICdjdXN0b21SdWxlcycsIHNlbGYuY3VzdG9tUnVsZXMoKS5sZW5ndGgpO1xuICAgICAgICAgICAgc2VsZi5vd25TZXR0aW5ncy5jdXN0b21SdWxlcy5wdXNoKHJ1bGVPYmopO1xuICAgICAgICAgICAgc2VsZi5jdXN0b21SdWxlU3R5bGVTaGVldC5hZGRSdWxlKHJ1bGVPYmopXG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5hZGROZXdJY29uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaWNvbiA9IHtcbiAgICAgICAgICAgICAgICBkb21JZDoga28ub2JzZXJ2YWJsZSgnJyksXG4gICAgICAgICAgICAgICAgZW5hYmxlZDoga28ub2JzZXJ2YWJsZSh0cnVlKSxcbiAgICAgICAgICAgICAgICBmYUljb246IGtvLm9ic2VydmFibGUoJycpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNlbGYuX3N1YnNjcmliZVRvRGljdFZhbHVlcyhpY29uLCAndGFicycpO1xuICAgICAgICAgICAgc2VsZi50YWJJY29ucy50YWJzLnB1c2goaWNvbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5vbkJlZm9yZUJpbmRpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYuc2V0dGluZ3MgPSBzZWxmLnNldHRpbmdzLnNldHRpbmdzO1xuICAgICAgICAgICAgc2VsZi5vd25TZXR0aW5ncyA9IHNlbGYuc2V0dGluZ3MucGx1Z2lucy50aGVtZWlmeTtcbiAgICAgICAgICAgIHNlbGYuY3VzdG9tUnVsZXMgPSBzZWxmLm93blNldHRpbmdzLmN1c3RvbVJ1bGVzLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgcmF0ZUxpbWl0OiA1MCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsZi5vblJ1bGVUb2dnbGUgPSBzZWxmLm9uUnVsZVRvZ2dsZTtcbiAgICAgICAgICAgIHNlbGYudGFiSWNvbnMgPSB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogc2VsZi5vd25TZXR0aW5ncy50YWJzLmVuYWJsZUljb25zLFxuICAgICAgICAgICAgICAgIHRhYnM6IHNlbGYub3duU2V0dGluZ3MudGFicy5pY29ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgXG4gICAgICAgICAgICBpZiAoc2VsZi50YWJJY29ucy5lbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnNldHVwSWNvbnMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi5lbmFibGVUaGVtaW5nKCk7XG4gICAgICAgICAgICBzZWxmLmN1c3RvbVJ1bGVTdHlsZVNoZWV0LmluaXRXaXRoUnVsZXMoc2VsZi5jdXN0b21SdWxlcyk7XG4gICAgICAgICAgICBzZWxmLmJ1aWx0SW5TdHlsZXMuaW5pdFdpdGhSdWxlcyhzZWxmLm93blNldHRpbmdzLmNvbG9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLnVwZGF0ZUNvbG9ycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgLy8gICBzZWxmLl9yZW1vdmVCdWlsdEluU3R5bGVzKCk7XG4gICAgICAgICAgICBpZiAoc2VsZi5vd25TZXR0aW5ncy5lbmFibGVDdXN0b21pemF0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLm93blNldHRpbmdzXG4gICAgICAgICAgICAgICAgICAgIC5jb2xvcigpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIocnVsZSA9PiAhIXJ1bGUuZW5hYmxlZCgpKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChydWxlLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9hcHBseVJ1bGUocnVsZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuX3VwZGF0ZUN1c3RvbVJ1bGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAvLyAgIHNlbGYuX3JlbW92ZUN1c3RvbVN0eWxlcygpO1xuICAgICAgICAgICAgc2VsZi51cGRhdGVDb2xvcnMoKTtcbiAgICAgICAgICAgIGlmIChzZWxmLm93blNldHRpbmdzLmVuYWJsZUN1c3RvbWl6YXRpb24oKSkge1xuICAgICAgICAgICAgICAgIHNlbGYub3duU2V0dGluZ3NcbiAgICAgICAgICAgICAgICAgICAgLmN1c3RvbVJ1bGVzKClcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihydWxlID0+ICEhcnVsZS5lbmFibGVkKCkpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAocnVsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9hcHBseVJ1bGUocnVsZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuX2FwcGx5UnVsZSA9IGZ1bmN0aW9uKHJ1bGUsIGJ1aWx0SW4gPSBmYWxzZSkge1xuICAgICAgICAgLy8gICBjb25zdCBjc3NUZXh0ID0gcnVsZU9iamVjdFRvQ1NTVGV4dChydWxlKTtcbiAgICAgICAgICAgIGlmKCFydWxlLnNlbGVjdG9yKCkgfHwgIXJ1bGUucnVsZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL3NlbGYuY3VzdG9tU3R5bGVTaGVldC5pbnNlcnRSdWxlKGNzc1RleHQpO1xuICAgICAgICAvLyAgICBjb25zb2xlLmxvZyhzZWxmLilcbiAgICAgICAgICAgIC8vICQocnVsZS5zZWxlY3RvcigpKS5jc3MocnVsZS5ydWxlKCksIHJ1bGUudmFsdWUoKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5jbG9uZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgLy9nZXQgb2JzZXJ2YWJsZSB2YWx1ZVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmogPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmooKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG9iaiA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8XG4gICAgICAgICAgICAgICAgJ2lzQWN0aXZlQ2xvbmUnIGluIG9ialxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG5cbiAgICAgICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBEYXRlKSB2YXIgdGVtcCA9IG5ldyBvYmouY29uc3RydWN0b3IoKTtcbiAgICAgICAgICAgIGVsc2UgdmFyIHRlbXAgPSBvYmouY29uc3RydWN0b3IoKTtcblxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ialsnaXNBY3RpdmVDbG9uZSddID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGVtcFtrZXldID0gc2VsZi5jbG9uZShvYmpba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmpbJ2lzQWN0aXZlQ2xvbmUnXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0ZW1wO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuX2NvcHlPd25TZXR0aW5ncyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoc2VsZi5vd25TZXR0aW5ncykuZm9yRWFjaChmdW5jdGlvbihrZXksIGkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9vd25TZXR0aW5nc1ByZXZba2V5XSA9IHNlbGYuY2xvbmUoc2VsZi5vd25TZXR0aW5nc1trZXldKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYub25Db2xvckNoYW5nZSA9IGZ1bmN0aW9uKHJ1bGUsIHZhbHVlQ2hhbmdlZCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjb2xvciBjaGFuZ2UnLCBydWxlLCBpbmRleClcbiAgICAgICAgICAgIHNlbGYuYnVpbHRJblN0eWxlcy51cGRhdGVSdWxlKHJ1bGUsIGluZGV4KVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYub25DdXN0b21SdWxlQ2hhbmdlID0gZnVuY3Rpb24ocnVsZSwgdmFsdWVDaGFuZ2VkLCBpbmRleCkge1xuICAgICAgICAgICAgLy9zZWxmLnVwZGF0ZUNvbG9ycygpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3J1bGUgY2hhbmdlJywgcnVsZSwgaW5kZXgpXG4gICAgICAgICAgICBpZiAocnVsZS5ydWxlKCkgJiYgcnVsZS5zZWxlY3RvcigpICYmIHJ1bGUudmFsdWUoKSkge1xuICAgICAgICAgICAgICAgLy8gc2VsZi5fdXBkYXRlQ3VzdG9tUnVsZXMoKTtcbiAgICAgICAgICAgICAgIHNlbGYuY3VzdG9tUnVsZVN0eWxlU2hlZXQudXBkYXRlUnVsZShydWxlLCBpbmRleClcbiAgICAgICAgICAgICAgIC8vc2VsZi51cGRhdGVSdWxlU3R5bGVTaGVldChydWxlLCBpbmRleClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgLy8gY29uc29sZS5sb2coKVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYub25UaGVtZUNoYW5nZSA9IGZ1bmN0aW9uKG5ld1ZhbCkge1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNUaGVtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aGVtZScpXG4gICAgICAgICAgICB2YXIgaGFzQ2xhc3MgPSBjbGF6eiA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQoJ2h0bWwnKS5oYXNDbGFzcyhjbGF6eik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCFoYXNDbGFzcyhuZXdWYWwpKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RoZW1lJywgbmV3VmFsKTtcbiAgICAgICAgICAgICAgICAkKCdodG1sJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKG5ld1ZhbClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKHByZXZpb3VzVGhlbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYub25FbmFibGVkQ2hhbmdlID0gZnVuY3Rpb24obmV3VmFsKSB7XG4gICAgICAgICAgICBpZiAobmV3VmFsICYmICQoJ2h0bWwnKS5hdHRyKCdpZCcpICE9PSAndG91Y2gnKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5lbmFibGVUaGVtaW5nKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoJ2h0bWwnKS5yZW1vdmVDbGFzcyhzZWxmLmNsYXNzSWQpO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0aGVtZScsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIHNlbGYuY3VzdG9tUnVsZVN0eWxlU2hlZXQuZGlzYWJsZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5vbkVuYWJsZUN1c3RvbWl6YXRpb25DaGFuZ2UgPSBmdW5jdGlvbihuZXdWYWwpIHtcbiAgICAgICAgICAgIGlmIChuZXdWYWwpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmN1c3RvbVJ1bGVTdHlsZVNoZWV0LmVuYWJsZSgpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuY3VzdG9tUnVsZVN0eWxlU2hlZXQuZGlzYWJsZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5vbkljb25zRW5hYmxlQ2hhbmdlID0gZnVuY3Rpb24obmV3VmFsKSB7XG4gICAgICAgICAgICBpZiAobmV3VmFsKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zZXR1cEljb25zKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYucmVzdG9yZVRhYnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLm9uSWNvbkNoYW5nZSA9IGZ1bmN0aW9uKGljb24sIHZhbHVlLCBpLCBwcm9wS2V5KSB7XG4gICAgICAgICAgICBpZiAoIXNlbGYudGFiSWNvbnMuZW5hYmxlZCgpKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChwcm9wS2V5ID09PSAnZW5hYmxlZCcgJiYgIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5yZXN0b3JlVGFicygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5zZXR1cEljb25zKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5vblJ1bGVUb2dnbGUgPSBmdW5jdGlvbihydWxlKSB7XG4gICAgICAgICAgICBydWxlLmVuYWJsZWQoIXJ1bGUuZW5hYmxlZCgpKTtcbiAgICAgICAgICAgIC8vb25DdXN0b21Db2xvckNoYW5nZSB3aWxsIHBpY2t1cCB0aGlzIGNoYW5nZSBhbmQgdXBkYXRlIGFjY29yZGluZ2x5XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5ydWxlSXNEZWxldGVhYmxlID0gZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICAgICAgLy9kZWxldGVhYmxlIGlmIG5vdCBleGlzdHNcbiAgICAgICAgICAgIGlmICghcnVsZS5kZWxldGFibGUgfHwgdHlwZW9mIHJ1bGUuZGVsZXRhYmxlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnVsZS5kZWxldGFibGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLm9uQ3VzdG9tUnVsZURlbGV0ZSA9IGZ1bmN0aW9uKHJ1bGUsIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5ydWxlSXNEZWxldGVhYmxlKHJ1bGUpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jdXN0b21SdWxlU3R5bGVTaGVldC5kZWxldGVSdWxlKGluZGV4KCkpXG4gICAgICAgICAgICAgICAgc2VsZi5jdXN0b21SdWxlcy5yZW1vdmUocnVsZSk7XG4gICAgICAgICAgICAgICAgLy9zZWxmLl91cGRhdGVDdXN0b21SdWxlcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYub25JY29uRGVsZXRlID0gZnVuY3Rpb24oaWNvbikge1xuICAgICAgICAgICAgc2VsZi5yZXN0b3JlVGFicygpO1xuICAgICAgICAgICAgc2VsZi50YWJJY29ucy50YWJzLnJlbW92ZShpY29uKTtcbiAgICAgICAgICAgIHNlbGYuc2V0dXBJY29ucygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuX3N1YnNjcmliZVRvRGljdFZhbHVlcyA9IGZ1bmN0aW9uKGRpY3QsIGtleSwgaSwgc3Vic2NyaWJlRnVuYykge1xuICAgICAgICAgICAgdmFyIHN1YkZ1bmMgPSBzdWJzY3JpYmVGdW5jXG4gICAgICAgICAgICAgICAgPyBzdWJzY3JpYmVGdW5jLmJpbmQodGhpcywgZGljdClcbiAgICAgICAgICAgICAgICA6IHNlbGYub25DdXN0b21SdWxlQ2hhbmdlLmJpbmQodGhpcywgZGljdCk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhkaWN0KS5tYXAoZGljdEF0dHIgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnU3Vic2NyaXB0aW9uc1trZXldLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIGRpY3RbZGljdEF0dHJdLnN1YnNjcmliZSh2YWwgPT4gc3ViRnVuYyh2YWwsaSwgZGljdEF0dHIpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgc2VsZi5vblNldHRpbmdzU2hvd24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vc3Vic2NyaWJlIHRvIGNoYW5nZXNcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNlbGYub3duU2V0dGluZ3MpLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PSAnY3VzdG9tUnVsZXMnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnU3Vic2NyaXB0aW9uc1trZXldID0gW107XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY3VzdG9tUnVsZXMoKS5tYXAoKHJ1bGUsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdWInLCBpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zdWJzY3JpYmUgdG8gdGhlIGF0dHJpYnV0ZXMgKHNlbGVjdG9yLCBydWxlLCB2YWx1ZSwgZW5hYmxlZCBldGMpXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zdWJzY3JpYmVUb0RpY3RWYWx1ZXMocnVsZSwga2V5LCBpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0gJ2NvbG9yJykge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZ1N1YnNjcmlwdGlvbnNba2V5XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3ViRnVuYyA9IHNlbGYub25Db2xvckNoYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgLy9Mb29wIHJ1bGVzXG4gICAgICAgICAgICAgICAgICAgIHNlbGYub3duU2V0dGluZ3MuY29sb3IoKS5tYXAoKHJ1bGUsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc3Vic2NyaWJlIHRvIHRoZSBhdHRyaWJ1dGVzIChzZWxlY3RvciwgcnVsZSwgdmFsdWUsIGVuYWJsZWQgZXRjKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc3Vic2NyaWJlVG9EaWN0VmFsdWVzKHJ1bGUsIGtleSwgaSxzdWJGdW5jKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0gJ3RhYnMnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YiA9IChzZWxmLmNvbmZpZ1N1YnNjcmlwdGlvbnNba2V5XSA9IFtdKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBlbmFibGVkLCB0YWJzIH0gPSBzZWxmLnRhYkljb25zO1xuICAgICAgICAgICAgICAgICAgICBzdWIucHVzaChlbmFibGVkLnN1YnNjcmliZShzZWxmLm9uSWNvbnNFbmFibGVDaGFuZ2UpKTtcbiAgICAgICAgICAgICAgICAgICAgdGFicygpLm1hcCgodGFiLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zdWJzY3JpYmVUb0RpY3RWYWx1ZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9uSWNvbkNoYW5nZVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9Vc2UgdGhlIG1hcCBmb3Igc2ltcGxlIHN1YnNjcmlwdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9uQ2hhbmdlRnVuYyA9IHNlbGYuY29uZmlnT25DaGFuZ2VNYXBba2V5XVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZ1N1YnNjcmlwdGlvbnNba2V5XSA9IHNlbGYub3duU2V0dGluZ3NbXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlcbiAgICAgICAgICAgICAgICAgICAgXS5zdWJzY3JpYmUob25DaGFuZ2VGdW5jKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLm9uU2V0dGluZ3NIaWRkZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vQ2xlYW51cCBzdWJzY3JpcHRpb25zXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzZWxmLmNvbmZpZ1N1YnNjcmlwdGlvbnMpLm1hcCgoa2V5LCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VsZi5jb25maWdTdWJzY3JpcHRpb25zW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnU3Vic2NyaXB0aW9uc1trZXldLmZvckVhY2goZWxlbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWdTdWJzY3JpcHRpb25zW2tleV0uZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuY29uZmlnT25DaGFuZ2VNYXAgPSB7XG4gICAgICAgICAgICBlbmFibGVkOiBzZWxmLm9uRW5hYmxlZENoYW5nZSxcbiAgICAgICAgICAgIHRoZW1lOiBzZWxmLm9uVGhlbWVDaGFuZ2UsXG4gICAgICAgICAgICBlbmFibGVDdXN0b21pemF0aW9uOiBzZWxmLm9uRW5hYmxlQ3VzdG9taXphdGlvbkNoYW5nZSxcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLmluaXQoKTtcbiAgICB9XG5cbiAgICBPQ1RPUFJJTlRfVklFV01PREVMUy5wdXNoKHtcbiAgICAgICAgY29uc3RydWN0OiBUaGVtZWlmeVZpZXdNb2RlbCxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiBbJ3NldHRpbmdzVmlld01vZGVsJ10sXG4gICAgICAgIGVsZW1lbnRzOiBbJyNzZXR0aW5nc19wbHVnaW5fdGhlbWVpZnknXSxcbiAgICB9KTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIG9jdG9wcmludF90aGVtZWlmeS9zdGF0aWMvanMvdGhlbWVpZnkuanMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTs7Ozs7QUFBQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQ0E7QUFLQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction ruleObjectToCSSText(_ref) {\n  var selector = _ref.selector,\n      rule = _ref.rule,\n      value = _ref.value;\n  var text = "".concat(selector(), " { ").concat(rule(), ": ").concat(value(), " !important; }");\n  console.log(text);\n  return text;\n}\n\nvar RuleStyleSheet =\n/*#__PURE__*/\nfunction () {\n  function RuleStyleSheet(domElement, rules) {\n    _classCallCheck(this, RuleStyleSheet);\n\n    this.rules = rules;\n    this.styleSheet = domElement.sheet;\n    this.rulesIndexToSheetRule = [];\n    this.domElement = domElement; //this.initWithRules();\n  }\n\n  _createClass(RuleStyleSheet, [{\n    key: "initWithRules",\n    value: function initWithRules() {\n      var _this = this;\n\n      var rules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.rules;\n      //console.log(rules)\n      this.rules = rules;\n      rules().forEach(function (ruleObj, i) {\n        if (ruleObj.enabled()) {\n          _this.addRule(ruleObj, i);\n        }\n      });\n      console.log(this.styleSheet.cssRules);\n      console.log(this);\n    }\n  }, {\n    key: "addRule",\n    value: function addRule(ruleObj, ruleIndex) {\n      var sheetIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.styleSheet.cssRules.length;\n\n      if (ruleIndex === undefined) {\n        ruleIndex = this.rules().length - 1;\n      }\n\n      var cssText = ruleObjectToCSSText(ruleObj);\n      this.styleSheet.insertRule(cssText, sheetIndex);\n      var cssRule = this.styleSheet.cssRules[sheetIndex];\n      this.rulesIndexToSheetRule[ruleIndex] = cssRule;\n      return cssRule;\n    }\n  }, {\n    key: "deleteRule",\n    value: function deleteRule(ruleIndex, sheetIndex) {\n      if (sheetIndex === undefined) {\n        sheetIndex = this.getCSSRulesIndexByRuleIndex(ruleIndex);\n      }\n\n      if (sheetIndex > -1) {\n        this.styleSheet.deleteRule(sheetIndex);\n        delete this.rulesIndexToSheetRule[ruleIndex];\n        return sheetIndex;\n      }\n\n      return -1;\n    }\n  }, {\n    key: "disable",\n    value: function disable() {\n      self.styleSheet.disabled = true;\n    }\n  }, {\n    key: "enable",\n    value: function enable() {\n      self.styleSheet.disabled = false;\n    }\n  }, {\n    key: "updateRule",\n    value: function updateRule(ruleObj, ruleIndex) {\n      // remove as we cannot update\n      var sheetIndex = this.deleteRule(ruleIndex);\n\n      if (ruleObj.enabled()) {\n        var reUsedIndex = sheetIndex > -1 ? sheetIndex : undefined;\n        return this.addRule(ruleObj, ruleIndex, reUsedIndex);\n      }\n\n      return null;\n    }\n  }, {\n    key: "getCSSRulesIndexByRuleIndex",\n    value: function getCSSRulesIndexByRuleIndex(ruleIndex) {\n      var ruleToFind = this.rulesIndexToSheetRule[ruleIndex];\n\n      if (!ruleToFind) {\n        return -1;\n      }\n\n      for (var i = 0; i < this.styleSheet.cssRules.length; i++) {\n        var cssRule = this.styleSheet.cssRules[i];\n\n        if (cssRule === ruleToFind) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n  }], [{\n    key: "createStyleSheet",\n    value: function createStyleSheet(name, rulesArray) {\n      var styleSheet = document.createElement("style");\n      styleSheet.title = name;\n      $("html").addClass(styleSheet.title);\n      var s = document.head.appendChild(styleSheet);\n      return new RuleStyleSheet(styleSheet, rulesArray);\n    }\n  }]);\n\n  return RuleStyleSheet;\n}();\n\nvar _default = RuleStyleSheet;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9vY3RvcHJpbnRfdGhlbWVpZnkvc3RhdGljL2pzL1J1bGVTdHlsZVNoZWV0LmpzPzk0N2QiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcnVsZU9iamVjdFRvQ1NTVGV4dCh7IHNlbGVjdG9yLCBydWxlLCB2YWx1ZSB9KSB7XG4gICAgY29uc3QgdGV4dCA9IGAke3NlbGVjdG9yKCl9IHsgJHtydWxlKCl9OiAke3ZhbHVlKCl9ICFpbXBvcnRhbnQ7IH1gO1xuICAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgIHJldHVybiB0ZXh0O1xufVxuXG5jbGFzcyBSdWxlU3R5bGVTaGVldCB7XG4gICAgY29uc3RydWN0b3IoZG9tRWxlbWVudCwgcnVsZXMpIHtcbiAgICAgICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgICAgICB0aGlzLnN0eWxlU2hlZXQgPSBkb21FbGVtZW50LnNoZWV0O1xuICAgICAgICB0aGlzLnJ1bGVzSW5kZXhUb1NoZWV0UnVsZSA9IFtdO1xuICAgICAgICB0aGlzLmRvbUVsZW1lbnQgPSBkb21FbGVtZW50O1xuICAgICAgICAvL3RoaXMuaW5pdFdpdGhSdWxlcygpO1xuICAgIH1cblxuICAgIGluaXRXaXRoUnVsZXMocnVsZXMgPSB0aGlzLnJ1bGVzKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2cocnVsZXMpXG4gICAgICAgIHRoaXMucnVsZXMgPSBydWxlc1xuICAgICAgICBydWxlcygpLmZvckVhY2goKHJ1bGVPYmosIGkpID0+IHtcbiAgICAgICAgICAgIGlmIChydWxlT2JqLmVuYWJsZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUnVsZShydWxlT2JqLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc3R5bGVTaGVldC5jc3NSdWxlcylcbiAgICAgICAgY29uc29sZS5sb2codGhpcylcbiAgICB9XG5cbiAgICBhZGRSdWxlKHJ1bGVPYmosIHJ1bGVJbmRleCwgc2hlZXRJbmRleCA9IHRoaXMuc3R5bGVTaGVldC5jc3NSdWxlcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHJ1bGVJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBydWxlSW5kZXggPSB0aGlzLnJ1bGVzKCkubGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjc3NUZXh0ID0gcnVsZU9iamVjdFRvQ1NTVGV4dChydWxlT2JqKTtcbiAgICAgICAgdGhpcy5zdHlsZVNoZWV0Lmluc2VydFJ1bGUoY3NzVGV4dCwgc2hlZXRJbmRleCk7XG4gICAgICAgIGNvbnN0IGNzc1J1bGUgPSB0aGlzLnN0eWxlU2hlZXQuY3NzUnVsZXNbc2hlZXRJbmRleF07XG4gICAgICAgIHRoaXMucnVsZXNJbmRleFRvU2hlZXRSdWxlW3J1bGVJbmRleF0gPSBjc3NSdWxlO1xuICAgICAgICByZXR1cm4gY3NzUnVsZTtcbiAgICB9XG5cbiAgICBkZWxldGVSdWxlKHJ1bGVJbmRleCwgc2hlZXRJbmRleCkge1xuICAgICAgICBpZihzaGVldEluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNoZWV0SW5kZXggPSB0aGlzLmdldENTU1J1bGVzSW5kZXhCeVJ1bGVJbmRleChydWxlSW5kZXgpXG4gICAgICAgIH1cbiAgICAgICAgaWYoc2hlZXRJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlU2hlZXQuZGVsZXRlUnVsZShzaGVldEluZGV4KVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMucnVsZXNJbmRleFRvU2hlZXRSdWxlW3J1bGVJbmRleF1cbiAgICAgICAgICAgIHJldHVybiBzaGVldEluZGV4XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xXG4gICAgfVxuXG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgc2VsZi5zdHlsZVNoZWV0LmRpc2FibGVkID0gdHJ1ZVxuICAgIH1cblxuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgc2VsZi5zdHlsZVNoZWV0LmRpc2FibGVkID0gZmFsc2VcbiAgICB9XG5cbiAgICB1cGRhdGVSdWxlKHJ1bGVPYmosIHJ1bGVJbmRleCkge1xuICAgICAgICAvLyByZW1vdmUgYXMgd2UgY2Fubm90IHVwZGF0ZVxuICAgICAgICBjb25zdCBzaGVldEluZGV4ID0gdGhpcy5kZWxldGVSdWxlKHJ1bGVJbmRleClcbiAgICAgICAgXG4gICAgICAgIGlmIChydWxlT2JqLmVuYWJsZWQoKSkge1xuICAgICAgICAgICAgY29uc3QgcmVVc2VkSW5kZXggPSBzaGVldEluZGV4ID4gLTEgPyBzaGVldEluZGV4IDogdW5kZWZpbmVkXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRSdWxlKHJ1bGVPYmosIHJ1bGVJbmRleCwgcmVVc2VkSW5kZXgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBnZXRDU1NSdWxlc0luZGV4QnlSdWxlSW5kZXgocnVsZUluZGV4KSB7XG4gICAgICAgIGNvbnN0IHJ1bGVUb0ZpbmQgPSB0aGlzLnJ1bGVzSW5kZXhUb1NoZWV0UnVsZVtydWxlSW5kZXhdO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFydWxlVG9GaW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN0eWxlU2hlZXQuY3NzUnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNzc1J1bGUgPSB0aGlzLnN0eWxlU2hlZXQuY3NzUnVsZXNbaV07XG4gICAgICAgICAgICBpZiAoY3NzUnVsZSA9PT0gcnVsZVRvRmluZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlU3R5bGVTaGVldChuYW1lLCBydWxlc0FycmF5KSB7XG4gICAgICAgIGNvbnN0IHN0eWxlU2hlZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgIHN0eWxlU2hlZXQudGl0bGUgPSBuYW1lO1xuICAgICAgICAkKFwiaHRtbFwiKS5hZGRDbGFzcyhzdHlsZVNoZWV0LnRpdGxlKTtcbiAgICAgICAgY29uc3QgcyA9IGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVTaGVldCk7XG4gICAgICAgIHJldHVybiBuZXcgUnVsZVN0eWxlU2hlZXQoc3R5bGVTaGVldCwgcnVsZXNBcnJheSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSdWxlU3R5bGVTaGVldDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBvY3RvcHJpbnRfdGhlbWVpZnkvc3RhdGljL2pzL1J1bGVTdHlsZVNoZWV0LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQUdBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL29jdG9wcmludF90aGVtZWlmeS9zdGF0aWMvbGVzcy9iYXNlLmxlc3M/ZTc2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vb2N0b3ByaW50X3RoZW1laWZ5L3N0YXRpYy9sZXNzL2Jhc2UubGVzc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")}]);